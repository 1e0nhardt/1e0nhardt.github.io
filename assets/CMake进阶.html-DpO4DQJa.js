import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c,a as s,b as a,d as e,e as n}from"./app-jYPNnZCE.js";const p={},d=s("h1",{id:"cmake进阶",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#cmake进阶"},[s("span",null,"CMake进阶")])],-1),t={href:"https://github.com/parallel101/course/blob/master/11/slides.pptx",target:"_blank",rel:"noopener noreferrer"},k=n(`<h2 id="命令行小技巧" tabindex="-1"><a class="header-anchor" href="#命令行小技巧"><span>命令行小技巧</span></a></h2><p>传统CMake(2.x)构建</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">mkdir</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#032F62;--shiki-dark:#98C379;"> ..</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> # 运行CMake，生成Makefile</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">make</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -j4</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> # 使用 make 真正开始构建，4线程</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="color:#032F62;--shiki-dark:#98C379;"> make</span><span style="color:#032F62;--shiki-dark:#98C379;"> install</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> # 安装</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="color:#032F62;--shiki-dark:#98C379;"> ..</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现代CMake(3.x)构建</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 在源码目录用 -B 直接创建 build 目录并生成 build/Makefile</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -B</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 自动调用本地的构建系统在 build 里构建，即：make -C build -j4</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> --build</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -j4</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 调用本地的构建系统执行 install 这个目标，即安装</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="color:#032F62;--shiki-dark:#98C379;"> cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> --build</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> --target</span><span style="color:#032F62;--shiki-dark:#98C379;"> install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：</p><ol><li>不用切换目录</li><li><code>cmake --build build</code>统一了不同平台：Linux 上会调用 make，Windows 上调用 devenv.exe</li></ol><h3 id="cmake项目构建-配置阶段" tabindex="-1"><a class="header-anchor" href="#cmake项目构建-配置阶段"><span>CMake项目构建--配置阶段</span></a></h3><p><code>cmake -B build</code></p><ul><li>只检测环境并生成构建规则。</li><li>会在 build 目录下生成本地构建系统能识别的项目文件（Makefile 或是 .sln）。</li><li>在配置阶段可以通过 -D 设置缓存变量。第二次配置时，之前的 -D 添加仍然会被保留。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -B</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -DCMAKE_INSTALL_PREFIX=/opt/openvdb-8.0</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -B</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -DCMAKE_BUILD_TYPE=Release</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">cmake</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> -B</span><span style="color:#032F62;--shiki-dark:#98C379;"> build</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> # CMAKE_BUILD_TYPE 和 CMAKE_INSTALL_PREFIX 都会保留</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmake项目构建-构建阶段" tabindex="-1"><a class="header-anchor" href="#cmake项目构建-构建阶段"><span>CMake项目构建--构建阶段</span></a></h3><p>cmake --build build</p><ul><li>实际调用编译器来编译代码</li></ul><h3 id="d选项-指定配置变量-又称缓存变量" tabindex="-1"><a class="header-anchor" href="#d选项-指定配置变量-又称缓存变量"><span>-D选项--指定配置变量（又称缓存变量）</span></a></h3><ul><li>CMAKE_INSTALL_PREFIX: 设置安装路径</li><li>DCMAKE_BUILD_TYPE: 设置构建模式为发布模式（开启全部优化）</li></ul><h3 id="g选项-指定生成器" tabindex="-1"><a class="header-anchor" href="#g选项-指定生成器"><span>-G选项--指定生成器</span></a></h3><ul><li>负责从 CMakeLists.txt 生成本地构建系统（指make、MSBuild）构建规则文件的，称为生成器（generator）。</li><li>Linux 系统上的 CMake 默认用是 Unix Makefiles 生成器；Windows 系统默认是 Visual Studio 2019 生成器；MacOS 系统默认是 Xcode 生成器。</li><li>可以用 -G 参数改用别的生成器，例如 cmake -GNinja 会生成 Ninja 这个构建系统的构建规则。Ninja 是一个高性能，跨平台的构建系统，Linux、Windows、MacOS 上都可以用。</li><li>Ninja 可以从包管理器里安装，没有包管理器的 Windows 可以用 Python 的包管理器安装：<code>pip install ninja</code></li><li>事实上，MSBuild 是单核心的构建系统（CUDA toolkit 在 Windows 上只允许用 MSBuild 构建），Makefile 虽然多核心但因历史兼容原因效率一般。而 Ninja 则是专为性能优化的构建系统，他和 CMake 结合都是行业标准了。</li></ul><h2 id="添加源文件" tabindex="-1"><a class="header-anchor" href="#添加源文件"><span>添加源文件</span></a></h2><p>最基础的方式</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main main.cpp other.cpp)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先创建目标，稍后再添加源文件</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> main.cpp other.cpp)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用变量存储</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> main.cpp other.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> \${sources}</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>建议把头文件也加上，这样在 VS 里可以出现在“Header Files”一栏。</p></div><p>使用 GLOB 自动查找<strong>当前目录下</strong>指定扩展名的文件，实现批量添加源文件</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">file</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(GLOB </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> *.cpp *.h)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> \${sources}</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用 <code>CONFIGURE_DEPENDS</code> 选项，当添加新文件时，自动更新变量</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">file</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(GLOB </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> CONFIGURE_DEPENDS *.cpp *.h)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_sources</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> \${sources}</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何将子目录中的源文件添加进来</p><ol><li><code>aux_source_directory</code>，自动搜集需要的文件后缀名</li><li><code>file(GLOB_RECURSE sources CONFIGURE_DEPENDS *.cpp *.h)</code><ol><li>可能会将build目录里的临时cpp文件也包含进来</li><li>解决方法是把源码统一放到 src 目录下</li><li><code>file(GLOB_RECURSE sources CONFIGURE_DEPENDS src/*.cpp src/*.h)</code></li></ol></li></ol><h2 id="项目配置变量" tabindex="-1"><a class="header-anchor" href="#项目配置变量"><span>项目配置变量</span></a></h2><h3 id="cmake-build-type" tabindex="-1"><a class="header-anchor" href="#cmake-build-type"><span>CMAKE_BUILD_TYPE</span></a></h3><p><code>CMAKE_BUILD_TYPE</code> 是 CMake 中一个特殊的变量，用于控制构建类型，其值可以是：</p><ul><li>Debug 调试模式，完全不优化，生成调试信息，方便调试程序</li><li>Release 发布模式，优化程度最高，性能最佳，但是编译比 Debug 慢</li><li>MinSizeRel 最小体积发布，生成的文件比 Release 更小，不完全优化，减少二进制体积</li><li>RelWithDebInfo 带调试信息发布，生成的文件比 Release 更大，因为带有调试的符号信息<br> 默认情况下<code>CMAKE_BUILD_TYPE</code>为空字符串，这时相当于 Debug。</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>各种构建模式在编译器选项上的区别<br> 在Release模式下，追求的是程序的最佳性能表现，在此情况下，编译器会对程序做最大的代码优化以达到最快运行速度。另一方面，由于代码优化后不与源代码一致，此模式下一般会丢失大量的调试信息。</p><ol><li>Debug: <code>-O0 -g</code></li><li>Release: <code>-O3 -DNDEBUG</code></li><li>MinSizeRel: <code>-Os -DNDEBUG</code></li><li>RelWithDebInfo: <code>-O2 -g -DNDEBUG</code><br> 注意: 定义了 NDEBUG 宏会使 assert 被去除掉。</li></ol></div><div class="hint-container note"><p class="hint-container-title">注</p><p>设定一个变量的默认值</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">NOT</span><span style="color:#E36209;--shiki-dark:#E06C75;"> CMAKE_BUILD_TYPE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;">CMAKE_BUILD_TYPE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> Release)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数 CMakeLists.txt 的开头都会有这样三行，为的是让默认的构建类型为发布模式（高度优化）而不是默认的调试模式（不会优化）。</p></div><h3 id="project" tabindex="-1"><a class="header-anchor" href="#project"><span>project</span></a></h3>`,39),h={href:"https://blog.csdn.net/fuyajun01/article/details/8891749",target:"_blank",rel:"noopener noreferrer"},B=s("br",null,null,-1),b=n(`<div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">VERSION</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> 3.15)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">project</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(hellocmake)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 打印项目相关信息</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;PROJECT_NAME:\${PROJECT_NAME}&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;PROJECT_SOURCE_DIR:\${PROJECT_SOURCE_DIR}&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;PROJECT_BINARY_DIR:\${PROJECT_BINARY_DIR]&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 当前源码目录的位置，例如 ~/hellocmake</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;CMAKE_CURRENT_SOURCE_DIR:\${CMAKE_CURRENT_SOURCE_DIR}&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 当前输出目录的位置，例如 ~/hellocmake/build</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;CMAKE_CURRENT_BINARY_DIR:\${CMAKE_CURRENT_BINARY_DIR}&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(mainmain.cpp)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里初始化了一个名称为 hellocmake 的项目，对于 MSVC，他会在 build 里生成 hellocmake.sln 作为“IDE 眼中的项目”。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>PROJECT_SOURCE_DIR</code> 表示最近一次调用 project 的 CMakeLists.txt 所在的源码目录。<br><code>CMAKE_CURRENT_SOURCE_DIR</code> 表示当前 CMakeLists.txt 所在的源码目录。<br><code>CMAKE_SOURCE_DIR</code> 表示最为外层 CMakeLists.txt 的源码根目录。<br> 利用 <code>PROJECT_SOURCE_DIR</code> 可以实现从子模块里直接获得项目最外层目录的路径。<br> 不建议用 <code>CMAKE_SOURCE_DIR</code>，那样会让你的项目无法被人作为子模块使用。</p></div>`,3),m={class:"hint-container info"},u=s("p",{class:"hint-container-title"},"相关信息",-1),C=s("code",null,"PROJECT_SOURCE_DIR",-1),y=s("br",null,null,-1),D=s("code",null,"PROJECT_BINARY_DIR",-1),A=s("br",null,null,-1),E=s("code",null,"CMAKE_SOURCE_DIR",-1),v=s("br",null,null,-1),_=s("code",null,"CMAKE_BINARY_DIR",-1),F=s("br",null,null,-1),g=s("code",null,"PROJECT_IS_TOP_LEVEL",-1),f=s("br",null,null,-1),R=s("code",null,"PROJECT_NAME",-1),O=s("br",null,null,-1),I=s("code",null,"CMAKE_PROJECT_NAME",-1),M=s("br",null,null,-1),N={href:"https://cmake.org/cmake/help/latest/command/project.html",target:"_blank",rel:"noopener noreferrer"},x=n(`<p>子模块里也可以用 project 命令，将当前目录作为一个独立的子项目。这样一来 <code>PROJECT_SOURCE_DIR</code> 就会是子模块的源码目录而不是外层了。这时候 CMake 会认为这个子模块是个独立的项目，会额外做一些初始化。他的构建目录 <code>PROJECT_BINARY_DIR</code> 也会变成 build/&lt;源码相对路径&gt;。在 MSVC 上也会看见 build/mylib/mylib.vcxproj 的生成。</p><p><code>project</code>设置了项目名后，也会设置 <code>&lt;项目名&gt;_SOURCE_DIR</code> 等变量。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>CMake 的 <code>\${}</code> 表达式可以嵌套<br><code>\${\${PROJECT_NAME}_VERSION}</code> 相当于 <code>\\\${hellocmake_VERSION}</code></p></div><h3 id="project-version" tabindex="-1"><a class="header-anchor" href="#project-version"><span>project VERSION</span></a></h3><p><code>project(项目名 VERSION x.y.z)</code>可以把当前项目的版本号设定为 x.y.z。</p><ul><li>之后可以通过 <code>PROJECT_VERSION</code> 来获取当前项目的版本号。</li><li><code>PROJECT_VERSION_MAJOR</code> 获取 x（主版本号）。</li><li><code>PROJECT_VERSION_MINOR</code> 获取 y（次版本号）。</li><li><code>PROJECT_VERSION_PATCH</code> 获取 z（补丁版本号）。</li></ul><h3 id="project-languages" tabindex="-1"><a class="header-anchor" href="#project-languages"><span>project LANGUAGES</span></a></h3><p><code>project(项目名 LANGUAGES 使用的语言列表...)</code> 指定了该项目使用了哪些编程语言。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 如果不指定 LANGUAGES，默认为 C 和 CXX。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">project</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(hellocmake)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 和上面等价</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">project</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(hellocmake LANGUAGES C CXX)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># 也可以先设置 LANGUAGES NONE，之后再调用 enable_language(CXX)。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">project</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(hellocmake LANGUAGES NONE)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">enable_language</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(CXX)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前支持的语言包括：</p><ul><li>C：C语言</li><li>CXX：C++语言</li><li>ASM：汇编语言</li><li>Fortran：老年人的编程语言</li><li>CUDA：英伟达的 CUDA（3.8 版本新增）</li><li>OBJC：苹果的 Objective-C（3.16 版本新增）</li><li>OBJCXX：苹果的 Objective-C++（3.16 版本新增）</li><li>ISPC：一种因特尔的自动 SIMD 编程语言（3.18 版本新增）</li></ul><p>常见问题：<code>LANGUAGES</code> 中没有启用 C 语言，但是却用到了 C 语言。</p><h3 id="设置c-标准" tabindex="-1"><a class="header-anchor" href="#设置c-标准"><span>设置C++标准</span></a></h3><ul><li><code>CMAKE_CXX_STANDARD</code>: 一个整数，表示要用的 C++ 标准。</li><li><code>CMAKE_CXX_STANDARD_REQUIRED</code>: 布尔类型，默认 OFF。表示是否一定要支持指定的 C++ 标准：如果为 OFF 则 CMake 检测到编译器不支持 C++17 时不报错，而是默默调低到 C++14 给你用；为 ON 则发现不支持报错，更安全。</li><li><code>CMAKE_CXX_EXTENSIONS</code>: 布尔类型。默认为 ON，表示启用 GCC 特有的一些扩展功能；OFF 则关闭 GCC 的扩展功能，只使用标准的 C++。 <ul><li>要兼容其他编译器（如 MSVC）的项目，都会设为 OFF 防止不小心用了 GCC 才有的特性。</li><li>最好是在 <code>project</code> 指令前设置 <code>CMAKE_CXX_STANDARD</code> 这一系列变量，这样 CMake 可以在 project 函数里对编译器进行一些检测。</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请勿直接修改 <code>CMAKE_CXX_FLAGS</code> 来添加 -std=c++17</p></div><h3 id="指定最低所需的-cmake-版本" tabindex="-1"><a class="header-anchor" href="#指定最低所需的-cmake-版本"><span>指定最低所需的 CMake 版本</span></a></h3><p><code>cmake_minimum_required(VERSION 3.15)</code><br> 会对 cmake_policy 有所影响。</p><h3 id="cmakelists-text模板" tabindex="-1"><a class="header-anchor" href="#cmakelists-text模板"><span>CMakeLists.text模板</span></a></h3><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">VERSION</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> 3.15)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="color:#D73A49;--shiki-dark:#C678DD;">ON</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">project</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(zeno LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;">PROJECT_BINARY_DIR</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> STREQUAL</span><span style="color:#E36209;--shiki-dark:#E06C75;"> PROJECT_SOURCE_DIR</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(WARNING </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;The binary directory of CMake cannot be the same as source directory!&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">（）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">NOT</span><span style="color:#E36209;--shiki-dark:#E06C75;"> CMAKE_BUILD_TYPE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;">CMAKE_BUILD_TYPE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> Release)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">（）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#005CC5;--shiki-dark:#D19A66;">WIN32</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	add_definitions</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(-DNOMINMAX -D_USE_MATH_DEFINES)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">（）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">NOT</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> MSVC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	find_program</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(CCACHE_PROGRAM ccache)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (CCACHE_PROGRAM)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">		message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(STATUS </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Found CCache:\${CCACHE_PROGRAM}&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">		set_property</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(GLOBAL PROPERTY </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">RULE_LAUNCH_COMPILE</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> \${CCACHE_PROGRAM}</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">		set_property</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(GLOBAL PROPERTY </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">RULE_LAUNCH_LINK</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> \${CCACHE_PROGRAM}</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">（）</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">endif</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">（）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接库文件" tabindex="-1"><a class="header-anchor" href="#链接库文件"><span>链接库文件</span></a></h2><p>静态库</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (mylib STATIC mylib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main main.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> mylib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态库</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (mylib SHARED mylib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main main.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> mylib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象库</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (mylib OBJECT mylib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main main.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> mylib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象库类似于静态库，但不生成 .a 文件，只由 CMake 记住该库生成了哪些对象文件。</p><ul><li>对象库是 CMake 自创的，绕开了编译器和操作系统的各种繁琐规则，保证了跨平台统一性。</li><li>在自己的项目中，推荐全部用对象库(OBJECT)替代静态库(STATIC)避免跨平台的麻烦。</li><li>对象库仅仅作为组织代码的方式，而实际生成的可执行文件只有一个，减轻了部署的困难。</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>静态库的麻烦：GCC 编译器自作聪明，会自动剔除没有引用符号的那些对象。<br> 对象库可以绕开编译器的不统一：保证不会自动剔除没引用到的对象文件。<br> 虽然动态库也可以避免剔除没引用的对象文件，但引入了运行时链接的麻烦。</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>add_library</code> 无参数时，是静态库还是动态库?<br> 会根据 BUILD_SHARED_LIBS 这个变量的值决定是动态库还是静态库。ON 则相当于 SHARED，OFF 则相当于 STATIC。如果未指定 BUILD_SHARED_LIBS 变量，则默认为 STATIC。<br> 如果发现一个项目里的 add_library 都是无参数的，意味着你可以用：<code>cmake -B build -DBUILD_SHARED_LIBS:BOOL=ON</code>来让他全部生成为动态库。</p></div><h3 id="常见坑点-动态库无法链接静态库" tabindex="-1"><a class="header-anchor" href="#常见坑点-动态库无法链接静态库"><span>常见坑点：动态库无法链接静态库</span></a></h3><p>解决：让静态库编译时也生成位置无关的代码(PIC)，这样才能装在动态库里。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;">CMAKE_POSITION_INDEPENDENT_CODE</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> ON</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(otherlib STATIC otherlib.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (mylib SHARED mylib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(mylib </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> otherlib)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main main.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> mylib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以只针对一个库，只对他启用位置无关的代码(PIC)</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (otherlib STATIC otherlib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">set_property</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">TARGET</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> otherlib PROPERTY </span><span style="color:#E36209;--shiki-dark:#E06C75;">POSITION_INDEPENDENT_CODE</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> ON</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_library</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(mylib SHARED mylib.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(mylib </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> otherlib)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">add_executable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(mainmain.cpp)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">target_link_libraries</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(main </span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;">PUBLIC</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> mylib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的属性" tabindex="-1"><a class="header-anchor" href="#对象的属性"><span>对象的属性</span></a></h2>`,36);function S(T,P){const i=r("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[s("a",t,[a("小彭老师的PPT"),e(i)])]),k,s("p",null,[s("a",h,[a("CMake常见变量——Project和CMake相关信息"),e(i)]),B,a(" 初始化项目信息，并把当前 CMakeLists.txt 所在位置作为根目录。")]),b,s("div",m,[u,s("p",null,[C,a("：当前项目源码路径（存放main.cpp的地方）"),y,D,a("：当前项目输出路径（存放main.exe的地方）"),A,E,a("：根项目源码路径（存放main.cpp的地方）"),v,_,a("：根项目输出路径（存放main.exe的地方）"),F,g,a("：BOOL类型，表示当前项目是否是（最顶层的）根项目"),f,R,a("：当前项目名"),O,I,a("：根项目的项目名"),M,a(" 详见："),s("a",N,[a("https://cmake.org/cmake/help/latest/command/project.html"),e(i)])])]),x])}const G=l(p,[["render",S],["__file","CMake进阶.html.vue"]]),j=JSON.parse('{"path":"/gameengine/CMake%E8%BF%9B%E9%98%B6.html","title":"CMake进阶","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-05-08T00:00:00.000Z","sticky":false,"star":false,"comment":true,"category":["Game"],"tags":["hazel"],"description":"CMake进阶","head":[["meta",{"property":"og:url","content":"https://1e0nhardt.github.io/gameengine/CMake%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"宁静致远"}],["meta",{"property":"og:title","content":"CMake进阶"}],["meta",{"property":"og:description","content":"CMake进阶"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T16:58:41.000Z"}],["meta",{"property":"article:author","content":"leonhardt"}],["meta",{"property":"article:tag","content":"hazel"}],["meta",{"property":"article:published_time","content":"2024-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-25T16:58:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMake进阶\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-25T16:58:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"leonhardt\\",\\"url\\":\\"/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"命令行小技巧","slug":"命令行小技巧","link":"#命令行小技巧","children":[{"level":3,"title":"CMake项目构建--配置阶段","slug":"cmake项目构建-配置阶段","link":"#cmake项目构建-配置阶段","children":[]},{"level":3,"title":"CMake项目构建--构建阶段","slug":"cmake项目构建-构建阶段","link":"#cmake项目构建-构建阶段","children":[]},{"level":3,"title":"-D选项--指定配置变量（又称缓存变量）","slug":"d选项-指定配置变量-又称缓存变量","link":"#d选项-指定配置变量-又称缓存变量","children":[]},{"level":3,"title":"-G选项--指定生成器","slug":"g选项-指定生成器","link":"#g选项-指定生成器","children":[]}]},{"level":2,"title":"添加源文件","slug":"添加源文件","link":"#添加源文件","children":[]},{"level":2,"title":"项目配置变量","slug":"项目配置变量","link":"#项目配置变量","children":[{"level":3,"title":"CMAKE_BUILD_TYPE","slug":"cmake-build-type","link":"#cmake-build-type","children":[]},{"level":3,"title":"project","slug":"project","link":"#project","children":[]},{"level":3,"title":"project VERSION","slug":"project-version","link":"#project-version","children":[]},{"level":3,"title":"project LANGUAGES","slug":"project-languages","link":"#project-languages","children":[]},{"level":3,"title":"设置C++标准","slug":"设置c-标准","link":"#设置c-标准","children":[]},{"level":3,"title":"指定最低所需的 CMake 版本","slug":"指定最低所需的-cmake-版本","link":"#指定最低所需的-cmake-版本","children":[]},{"level":3,"title":"CMakeLists.text模板","slug":"cmakelists-text模板","link":"#cmakelists-text模板","children":[]}]},{"level":2,"title":"链接库文件","slug":"链接库文件","link":"#链接库文件","children":[{"level":3,"title":"常见坑点：动态库无法链接静态库","slug":"常见坑点-动态库无法链接静态库","link":"#常见坑点-动态库无法链接静态库","children":[]}]},{"level":2,"title":"对象的属性","slug":"对象的属性","link":"#对象的属性","children":[]}],"git":{"createdTime":1716656321000,"updatedTime":1716656321000,"contributors":[{"name":"1e0nhardt","email":"huwkigane@gmail.com","commits":1}]},"readingTime":{"minutes":8.91,"words":2674},"filePathRelative":"gameengine/CMake进阶.md","localizedDate":"2024年5月8日","excerpt":""}');export{G as comp,j as data};
