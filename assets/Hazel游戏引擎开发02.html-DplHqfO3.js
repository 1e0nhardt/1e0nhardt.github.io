import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as r,c as o,a as s,b as a,d as e,e as i}from"./app-ygFmrJeo.js";const p={},d=i(`<h1 id="hazel游戏引擎开发02" tabindex="-1"><a class="header-anchor" href="#hazel游戏引擎开发02"><span>Hazel游戏引擎开发02</span></a></h1><h2 id="事件系统" tabindex="-1"><a class="header-anchor" href="#事件系统"><span>事件系统</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> EVENT_CLASS_TYPE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">type</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">static</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> EventType </span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">GetStaticType</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() { </span><span style="color:#D73A49;--shiki-dark:#C678DD;">return</span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;"> EventType</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="color:#24292E;--shiki-dark:#E06C75;">##type</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; }</span><span style="color:#005CC5;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">								virtual</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> EventType</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> GetEventType</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="color:#D73A49;--shiki-dark:#C678DD;">return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> GetStaticType</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(); }</span><span style="color:#005CC5;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">								virtual</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> GetName</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="color:#D73A49;--shiki-dark:#C678DD;">return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> #type</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>&#39;#&#39; 表示：对应变量字符串化</li><li>&#39;##&#39;表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">template</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;">typename</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">using</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> EventFn</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="color:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;">function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;">T</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)&gt;; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>声明了一个函数指针，返回值为bool，参数为T&amp;。</p><h2 id="预编译头文件" tabindex="-1"><a class="header-anchor" href="#预编译头文件"><span>预编译头文件</span></a></h2><p>用途：</p><ol><li>通过预编译不会改动的头文件(标准库，外部库等)加快编译速度。</li><li>方便编写代码。不用一直手动包含常用的头文件，只需包含一个预编译头文件。</li></ol><p>使用建议：</p><ol><li>不要将会频繁改动的头文件包含在预编译头文件中，因为一旦这些文件发生改动，预编译头文件也需要重新编译。</li><li>一些只有一两个文件用到的头文件(不常用的头文件)就不要放进来了，节省不了多少时间。另外，如果真将所有头文件都放进来，模块的依赖关系就被隐藏了。如果要将项目中的代码移动到另一个项目，就没法快速知道其依赖的头文件。</li><li>所有项目都应该使用。</li></ol><p>使用方法：</p><ol><li>新建pch.h, pch.cpp</li><li>pch.cpp-&gt;C/C++-&gt;预编译头-&gt;预编译头: 选择创建</li><li>项目-&gt;C/C++-&gt;预编译头-&gt;预编译头：选择创建。</li><li>项目-&gt;C/C++-&gt;预编译头-&gt;预编译头文件： pch.h</li><li>每个cpp文件的第一个include必须是pch.h</li></ol><p>premake5:<br> 在project下添加：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#61AFEF;">project</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;xx&quot;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">	-- ...</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#61AFEF;">	pchheader</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;hzpch.h&quot;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#61AFEF;">	pchsource</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;Hazel/src/hzpch.cpp&quot;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">	-- ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="窗口抽象和glfw" tabindex="-1"><a class="header-anchor" href="#窗口抽象和glfw"><span>窗口抽象和GLFW</span></a></h2>`,16),c={href:"https://github.com/TheCherno/glfw",target:"_blank",rel:"noopener noreferrer"},k=s("li",null,'Cherno提供的glfw库中多了一个premake5.lua用于将glfw配置为vs的项目(需要在system:window下加上staticruntime: "On"，否则会报错)',-1),h=s("li",null,"在项目根目录的premake5.lua引入glfw的premake配置，并配置好链接和包含目录",-1),u=i(`<div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">IncludeDir</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">IncludeDir</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;GLFW&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;Hazel/vendor/GLFW/include&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">-- 将Hazel/vendor/GLFW目录下的premake5.lua包含过来</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#61AFEF;">include</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;Hazel/vendor/GLFW&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#61AFEF;">project</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;Hazel&quot;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">	...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    includedirs</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">		&quot;%{prj.name}/src&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">        &quot;%{prj.name}/vendor/spdlog/include&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">        &quot;%{IncludeDir.GLFW}&quot;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    links</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">        &quot;GLFW&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">        &quot;opengl32.lib&quot;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">    ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="glad" tabindex="-1"><a class="header-anchor" href="#glad"><span>Glad</span></a></h2>`,2),y=s("strong",null,"运行时",-1),m=s("br",null,null,-1),B={href:"https://glad.dav1d.de/",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"GLFW_INCLUDE_NONE? 让GLFW不包含OpenGL",-1),g=s("h2",{id:"imgui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#imgui"},[s("span",null,"imgui")])],-1),F=s("p",null,"git checkout docking",-1);function C(b,E){const n=t("ExternalLinkIcon");return r(),o("div",null,[d,s("ol",null,[s("li",null,[a("添加git子模块：git submodule add "),s("a",c,[a("https://github.com/TheCherno/glfw"),e(n)]),a(" Hazel/vendor/GLFW")]),k,h]),u,s("p",null,[y,a("获取OpenGL函数地址并将其保存在函数指针中供以后使用（一个函数对应一个函数指针）。"),m,s("a",B,[a("https://glad.dav1d.de/"),e(n)])]),v,g,F])}const f=l(p,[["render",C],["__file","Hazel游戏引擎开发02.html.vue"]]),_=JSON.parse('{"path":"/gameengine/Hazel%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%9102.html","title":"Hazel游戏引擎开发02","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-04-30T00:00:00.000Z","sticky":false,"star":false,"comment":true,"category":["Game"],"tag":["hazel"],"description":"Hazel游戏引擎开发02","head":[["meta",{"property":"og:url","content":"https://1e0nhardt.github.io/gameengine/Hazel%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%9102.html"}],["meta",{"property":"og:site_name","content":"宁静致远"}],["meta",{"property":"og:title","content":"Hazel游戏引擎开发02"}],["meta",{"property":"og:description","content":"Hazel游戏引擎开发02"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T16:58:41.000Z"}],["meta",{"property":"article:author","content":"leonhardt"}],["meta",{"property":"article:tag","content":"hazel"}],["meta",{"property":"article:published_time","content":"2024-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-25T16:58:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hazel游戏引擎开发02\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-25T16:58:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"leonhardt\\",\\"url\\":\\"/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"事件系统","slug":"事件系统","link":"#事件系统","children":[]},{"level":2,"title":"预编译头文件","slug":"预编译头文件","link":"#预编译头文件","children":[]},{"level":2,"title":"窗口抽象和GLFW","slug":"窗口抽象和glfw","link":"#窗口抽象和glfw","children":[]},{"level":2,"title":"Glad","slug":"glad","link":"#glad","children":[]},{"level":2,"title":"imgui","slug":"imgui","link":"#imgui","children":[]}],"git":{"createdTime":1716656321000,"updatedTime":1716656321000,"contributors":[{"name":"1e0nhardt","email":"huwkigane@gmail.com","commits":1}]},"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"gameengine/Hazel游戏引擎开发02.md","localizedDate":"2024年4月30日","excerpt":""}');export{f as comp,_ as data};
