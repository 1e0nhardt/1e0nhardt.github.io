import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c as t,b as s,d as a,e as l,a as i}from"./app-BsuYk19D.js";const p={},d=s("h1",{id:"使用godot中遇到的问题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用godot中遇到的问题"},[s("span",null,"使用Godot中遇到的问题")])],-1),c=s("h2",{id:"线的抗锯齿",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#线的抗锯齿"},[s("span",null,"线的抗锯齿")])],-1),h=s("li",null,"antialiased属性：开销小，但也没什么作用",-1),k=s("li",null,"rendering/anti_aliasing/quality/msaa_2d: 2x, 4x, 8x。效果好，开销大。只对几何边缘(线，多边形等)和sprite的边缘像素有用。",-1),u={href:"https://godotengine.org/asset-library/asset/1266",target:"_blank",rel:"noopener noreferrer"},B=i(`<h2 id="仅在编辑器中运行" tabindex="-1"><a class="header-anchor" href="#仅在编辑器中运行"><span>仅在编辑器中运行</span></a></h2><p>@tool当在脚本的顶部添加时，脚本会在编辑器中执行。</p><p>可以使用Engine.is_editor_hint()确定脚本的哪些部分在编辑器中执行，在游戏中以及两者兼而有之。</p><ul><li>对于不在编辑器中执行的Node，只能访问其默认属性，不能访问用户定义的属性。</li><li>Autoload节点始终不能访问。</li><li>新增加的@tool脚本需要重启才能在编辑器中生效</li></ul><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> milliseconds</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> int</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> seconds</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> int</span><span style="color:#D73A49;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#E06C75;">	get</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> milliseconds</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">	set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">		milliseconds</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">signal</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> changed</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">new_value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> warns_when_changed</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;some value&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#E06C75;">	get</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> warns_when_changed</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">	set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">		changed</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">emit</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">		warns_when_changed</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> my_prop</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#E5C07B;">	get</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E06C75;"> get_my_prop</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">set</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E06C75;"> set_my_prop</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监控属性变化" tabindex="-1"><a class="header-anchor" href="#监控属性变化"><span>监控属性变化</span></a></h2><ul><li><code>_set(property, value)方法</code></li><li>有的属性需要用<code>set(property, value)</code>设置才会触发_set</li></ul><h2 id="关于vertex-shader" tabindex="-1"><a class="header-anchor" href="#关于vertex-shader"><span>关于vertex shader</span></a></h2><ul><li>CanvasItem <ul><li>VERTEX是输出，类型为vec2，表示当前节点局部坐标系中的顶点坐标，以pivot为原点，x向右增长，y向下增长。</li><li>一个Sprite2D只有4个顶点，在vertex()中只能操作4个顶点。所以让其波浪形运动不能在这里实现。</li></ul></li></ul><h2 id="如何实现p5对话框" tabindex="-1"><a class="header-anchor" href="#如何实现p5对话框"><span>如何实现P5对话框</span></a></h2><ul><li><p>已知</p><ul><li>顶点坐标和纹理坐标是一一对应的</li><li>改变顶点坐标时，其纹理坐标并不会变</li></ul></li><li><p>可得</p><ul><li>先用常规矩形设置纹理</li><li>再进行适当的三角切分区分边缘和内容部分</li><li>操作顶点实现边缘抖动效果</li></ul></li><li><p>直接用polygon2D画出来即可</p></li><li><p>通过直接修改顶点位置实现动画效果</p></li><li><p>AnimationPlayer不支持Polygon2D的顶点位置插值</p></li></ul><h2 id="在shader中读取屏幕颜色" tabindex="-1"><a class="header-anchor" href="#在shader中读取屏幕颜色"><span>在Shader中读取屏幕颜色</span></a></h2><div class="language-glsl line-numbers-mode" data-ext="glsl" data-title="glsl"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">uniform</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> sampler2D</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> screen_texture : hint_screen_texture, repeat_disable, filter_nearest;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">vec4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> screen_color </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> textureLod</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">screen_texture</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#24292E;--shiki-dark:#E06C75;"> SCREEN_UV</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0.0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在编辑器中，SCREEN_UV是以当前2D视口计算的，视口的左上角为(0, 1)，右下角为(1, 1)。而非2D视口中的屏幕区域。</p><h2 id="脚本控制shader参数" tabindex="-1"><a class="header-anchor" href="#脚本控制shader参数"><span>脚本控制shader参数</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">sprite</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">material</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> as</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> ShaderMaterial</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">set_shader_parameter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;percent&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1.0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">tween</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">tween_property</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">sprite</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">material</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;shader_parameter/percent&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">0.0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">0.25</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-0引入的global-instance-uniform" tabindex="-1"><a class="header-anchor" href="#_4-0引入的global-instance-uniform"><span>4.0引入的global &amp; instance uniform</span></a></h2><h3 id="global-uniform" tabindex="-1"><a class="header-anchor" href="#global-uniform"><span>global uniform</span></a></h3><ol><li>在ProjectSettings-&gt;Shader Globals中添加</li><li>在shader中用global uniform声明即可</li></ol><p>用例：</p><ol><li>将玩家位置传给shader：塞尔达中林克在草地上走动时，草倒地效果。</li><li>塞尔达中天气的变化</li><li>塞尔达中材质与环境的交互</li></ol><h3 id="instance-uniform" tabindex="-1"><a class="header-anchor" href="#instance-uniform"><span>instance uniform</span></a></h3><p>将shader参数变成每个节点独立</p><p>限制：</p><ol><li>每个shader最多16个</li><li>不支持纹理</li><li>存在多个shader是，只有第一个shader的会生效。</li></ol><h2 id="tween变化global-position" tabindex="-1"><a class="header-anchor" href="#tween变化global-position"><span>tween变化global_position</span></a></h2><p>速度快了会有点抖。</p><h2 id="godot节点生命周期" tabindex="-1"><a class="header-anchor" href="#godot节点生命周期"><span>Godot节点生命周期</span></a></h2><ul><li><code>_init()</code>: 构造器。Class.new()</li><li><code>_ready()</code>: 所有子节点都准备好了后，被通知ready后调用。</li><li><code>_enter_tree()</code> : DFS遍历到时调用。</li><li><code>_exit_tree()</code>: DFS返回时调用。</li><li><code>_process(delta)</code>: 每帧调用。tick()</li><li><code>_physics_process(delta)</code></li><li><code>_input(event)</code>: 接受游戏中所有事件</li><li><code>_unhandled_input(event)</code></li><li><code>_notification(what)</code>: 节点中发生的所有事件的通知</li></ul><p>典型用例：当玩家在游戏窗口外点击时，暂停游戏。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">func</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> _notification</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">what</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="color:#24292E;--shiki-dark:#E06C75;"> what</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Mainloop</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">NOTIFICATION_APPLICATION_FOCUS_OUT</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">		pause_game</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="owner-vs-get-parent" tabindex="-1"><a class="header-anchor" href="#owner-vs-get-parent"><span>owner vs get_parent()</span></a></h2><ul><li>owner <ul><li>在当前场景中: <ul><li>非根节点的owner就是根节点</li><li>根节点的owner为null</li></ul></li><li>添加到其他场景中： <ul><li>非根节点的owner就是原场景根节点</li><li>根节点的owner为新场景的根节点</li></ul></li><li>由脚本动态生成的节点的默认<code>Owner</code>是<code>null</code></li></ul></li><li>get_parent(): <ul><li>在当前场景中: <ul><li>非根节点：当前节点的父节点</li><li>根节点：root</li></ul></li><li>添加到其他场景中：当前节点的父节点</li></ul></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>:=</span></a></h2><p><code>var life_points := 4</code><br> 写冒号但省略写类型时,Godot将尝试推测类型</p><h2 id="如何获取当前代码所在文件-行数-函数" tabindex="-1"><a class="header-anchor" href="#如何获取当前代码所在文件-行数-函数"><span>如何获取当前代码所在文件，行数，函数</span></a></h2><p>get_stack(): 返回一个字典的数组，存储了当前调用栈的信息。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Returns an array of dictionaries representing the current call stack. See also print_stack().</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">func </span><span style="color:#24292E;--shiki-dark:#61AFEF;">_ready</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#61AFEF;">    foo</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">func </span><span style="color:#24292E;--shiki-dark:#61AFEF;">foo</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#61AFEF;">    bar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">func </span><span style="color:#24292E;--shiki-dark:#61AFEF;">bar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#56B6C2;">    print</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#61AFEF;">get_stack</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">[{function:bar, line:</span><span style="color:#005CC5;--shiki-dark:#D19A66;">12</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, source:res:</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">//</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">script.gd}, {function:foo, line:</span><span style="color:#005CC5;--shiki-dark:#D19A66;">9</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, source:res:</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">//</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">script.gd}, {function:_ready, line:</span><span style="color:#005CC5;--shiki-dark:#D19A66;">6</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, source:res:</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">//</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">script.gd}]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践-先改变属性-再添加节点" tabindex="-1"><a class="header-anchor" href="#最佳实践-先改变属性-再添加节点"><span>最佳实践--先改变属性，再添加节点</span></a></h2><p>因为添加节点到场景后，在改变属性，会调用相应属性的setter方法。部分情况下会使游戏卡顿(例如程序化生成很多节点时)。</p><h2 id="对场景子节点的操作需要在添加节点到场景后执行" tabindex="-1"><a class="header-anchor" href="#对场景子节点的操作需要在添加节点到场景后执行"><span>对场景子节点的操作需要在添加节点到场景后执行</span></a></h2><p>只有添加到场景后，get_node/$/%才有效。</p><h2 id="load-vs-preload" tabindex="-1"><a class="header-anchor" href="#load-vs-preload"><span>load vs preload</span></a></h2><ul><li>preload: 尽早加载资源。</li><li>load: 执行到这一行时才加载资源。</li><li>preload加载的资源不应该改变</li><li>preload的资源只有在所在脚本被卸载时才释放</li><li>load的资源，设为null时会移除所有到该资源的引用，并从内存中释放。</li></ul><h2 id="在gdscript中创建资源并保存" tabindex="-1"><a class="header-anchor" href="#在gdscript中创建资源并保存"><span>在GDScript中创建资源并保存</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">var atlas_res </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> AtlasTexture.</span><span style="color:#24292E;--shiki-dark:#61AFEF;">new</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">atlas_res.region </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#61AFEF;"> Rect2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">441</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">556</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">35</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">35</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">atlas_res.margin </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#61AFEF;"> Rect2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3.5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3.5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">7</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">7</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">ResourceSaver.</span><span style="color:#24292E;--shiki-dark:#61AFEF;">save</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(atlas_res, </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;res://resources/test.tres&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shader-代码共享" tabindex="-1"><a class="header-anchor" href="#shader-代码共享"><span>shader 代码共享</span></a></h2><ol><li>创建gdshaderinc文件，保存公用函数</li><li><code>#include &quot;res://xx/xx.gdshaderinc&quot;</code></li></ol><h2 id="实现drag-and-drop的简单方法" tabindex="-1"><a class="header-anchor" href="#实现drag-and-drop的简单方法"><span>实现Drag and Drop的简单方法</span></a></h2><p>使用StaticBody2D节点，将Input-&gt;pickable设为true，用CollisionShape2D确定拖拽生效区域。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">extends</span><span style="color:#24292E;--shiki-dark:#E06C75;"> StaticBody2D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> can_drag</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">func</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> _input_event</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">_viewport</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">event</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">_shape_idx</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#E06C75;"> event</span><span style="color:#24292E;--shiki-dark:#E06C75;"> is</span><span style="color:#6F42C1;--shiki-dark:#E06C75;"> InputEventMouseButton</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">        can_drag</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> event</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">pressed</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">func</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> _process</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">_delta</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">is_mouse_button_pressed</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">MOUSE_BUTTON_LEFT</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#24292E;--shiki-dark:#E06C75;">and</span><span style="color:#6F42C1;--shiki-dark:#E06C75;"> can_drag</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">        position</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> get_global_mouse_position</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sprite-get-rect-sprite-global-position" tabindex="-1"><a class="header-anchor" href="#sprite-get-rect-sprite-global-position"><span>sprite.get_rect() &amp; sprite.global_position</span></a></h2><ul><li>sprite.get_rect()返回的是局部坐标系中的坐标。</li><li>sprite.global_position 返回锚点的位置 <ul><li>Offset-&gt;Centered on: 图片中心点</li><li>Offset-&gt;Centered off: 图片左上角</li></ul></li></ul><h2 id="调用父类方法" tabindex="-1"><a class="header-anchor" href="#调用父类方法"><span>调用父类方法</span></a></h2><p>在覆盖父类的方法内用super方法以相同参数调用：<code>super(args)</code>。</p><h2 id="autoload类初始化问题" tabindex="-1"><a class="header-anchor" href="#autoload类初始化问题"><span>autoload类初始化问题</span></a></h2><ul><li>不能在自定义类的初始化函数中传入实际节点。此时，节点尚未生成。</li></ul><h2 id="control-node2d" tabindex="-1"><a class="header-anchor" href="#control-node2d"><span>Control &amp; Node2D</span></a></h2><ul><li>control <ul><li>有Rect定义其内容(Rect是在局部坐标系中表示的)</li><li>anchor position: 锚点，相对于父Control或Viewport</li><li>offset：相对锚点的偏移。在节点，父节点或屏幕尺寸大小改变时。</li></ul></li><li>Node2D <ul><li>Node+Transform组件</li></ul></li></ul><h2 id="event系统" tabindex="-1"><a class="header-anchor" href="#event系统"><span>Event系统</span></a></h2>`,63),y=s("li",null,[a("输入事件从场景树的根节点通过调用"),s("code",null,"Node._input()"),a("向下传播")],-1),E=s("li",null,[a("UI节点更适合用"),s("code",null,"_gui_input()"),a("，过滤了一些无关的事件，如:检查z-order，鼠标过滤，聚焦以及在Bounding Rect之外发生的事件")],-1),v=s("li",null,"调用accept_event()将接受事件，其他节点将不会收到该事件，Node.unhandled_input也不会处理它。",-1),b={href:"https://docs.godotengine.org/en/stable/classes/class_control.html#class-control-property-mouse-filter",target:"_blank",rel:"noopener noreferrer"},g=i(`<h2 id="获取label的字体-字体大小" tabindex="-1"><a class="header-anchor" href="#获取label的字体-字体大小"><span>获取Label的字体，字体大小</span></a></h2><ul><li><code>label.get_theme_font_size(&quot;font_size&quot;)</code></li><li><code>label.get_theme_font(&quot;font&quot;)</code></li><li>Label的宽度基本等于<code>label.get_theme_font_size(&quot;font_size&quot;) * label.text.length</code></li></ul><h2 id="多窗口" tabindex="-1"><a class="header-anchor" href="#多窗口"><span>多窗口</span></a></h2><ul><li>在主窗口设置: <code>get_viewport().gui_embed_subwindows = false</code>。</li><li>然后添加的Window场景，就会单独显示窗口。</li></ul><h2 id="sprite2d的placeholdertexture的uv不对" tabindex="-1"><a class="header-anchor" href="#sprite2d的placeholdertexture的uv不对"><span>Sprite2D的PlaceholderTexture的UV不对</span></a></h2><p>TextrureRect的没问题</p><h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间"><span>时间</span></a></h2><p>Time</p><h2 id="忽略警告" tabindex="-1"><a class="header-anchor" href="#忽略警告"><span>忽略警告</span></a></h2><ul><li>修改项目配置，影响所有文件。 <ul><li>例如：忽略未使用的参数警告。 project-&gt;settings-&gt;debug/gdscript/warnings/unused_parameter</li></ul></li><li>装饰器，在某个函数中忽略特定警告 <ul><li>例如：忽略整数除法警告。@warning_ignore(&quot;integer_division&quot;)</li></ul></li></ul><h2 id="resource类与实例" tabindex="-1"><a class="header-anchor" href="#resource类与实例"><span>Resource类与实例</span></a></h2><ul><li>通过load或preload加载相同的Resources，返回的是相同的实例</li><li>定义属性时，最好指定类型</li><li>只有export的属性会被序列化</li></ul><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><p>gdscript的枚举实际相当于</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">const enum_name </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">	ENUM_TYPE1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">	ENUM_TYPE2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">	ENUM_TYPE3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function m(A,C){const e=r("ExternalLinkIcon");return o(),t("div",null,[d,c,s("ol",null,[h,k,s("li",null,[a("插件"),s("a",u,[a("Antialiased-line2d"),l(e)])])]),B,s("ul",null,[y,E,v,s("li",null,[a("设置"),s("a",b,[a("mouse_filter"),l(e)]),a("可以告诉Control节点忽略鼠标事件")])]),g])}const f=n(p,[["render",m],["__file","使用Godot中遇到的问题.html.vue"]]),D=JSON.parse('{"path":"/gamedev/%E4%BD%BF%E7%94%A8Godot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html","title":"使用Godot中遇到的问题","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-11-11T00:00:00.000Z","sticky":false,"star":false,"comment":true,"category":["GameDev"],"tag":["godot"],"description":"使用Godot中遇到的问题","head":[["meta",{"property":"og:url","content":"https://1e0nhardt.github.io/gamedev/%E4%BD%BF%E7%94%A8Godot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"宁静致远"}],["meta",{"property":"og:title","content":"使用Godot中遇到的问题"}],["meta",{"property":"og:description","content":"使用Godot中遇到的问题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T14:07:48.000Z"}],["meta",{"property":"article:author","content":"leonhardt"}],["meta",{"property":"article:tag","content":"godot"}],["meta",{"property":"article:published_time","content":"2023-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T14:07:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Godot中遇到的问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-13T14:07:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"leonhardt\\",\\"url\\":\\"/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"线的抗锯齿","slug":"线的抗锯齿","link":"#线的抗锯齿","children":[]},{"level":2,"title":"仅在编辑器中运行","slug":"仅在编辑器中运行","link":"#仅在编辑器中运行","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"监控属性变化","slug":"监控属性变化","link":"#监控属性变化","children":[]},{"level":2,"title":"关于vertex shader","slug":"关于vertex-shader","link":"#关于vertex-shader","children":[]},{"level":2,"title":"如何实现P5对话框","slug":"如何实现p5对话框","link":"#如何实现p5对话框","children":[]},{"level":2,"title":"在Shader中读取屏幕颜色","slug":"在shader中读取屏幕颜色","link":"#在shader中读取屏幕颜色","children":[]},{"level":2,"title":"脚本控制shader参数","slug":"脚本控制shader参数","link":"#脚本控制shader参数","children":[]},{"level":2,"title":"4.0引入的global & instance uniform","slug":"_4-0引入的global-instance-uniform","link":"#_4-0引入的global-instance-uniform","children":[{"level":3,"title":"global uniform","slug":"global-uniform","link":"#global-uniform","children":[]},{"level":3,"title":"instance uniform","slug":"instance-uniform","link":"#instance-uniform","children":[]}]},{"level":2,"title":"tween变化global_position","slug":"tween变化global-position","link":"#tween变化global-position","children":[]},{"level":2,"title":"Godot节点生命周期","slug":"godot节点生命周期","link":"#godot节点生命周期","children":[]},{"level":2,"title":"owner vs get_parent()","slug":"owner-vs-get-parent","link":"#owner-vs-get-parent","children":[]},{"level":2,"title":":=","slug":"","link":"#","children":[]},{"level":2,"title":"如何获取当前代码所在文件，行数，函数","slug":"如何获取当前代码所在文件-行数-函数","link":"#如何获取当前代码所在文件-行数-函数","children":[]},{"level":2,"title":"最佳实践--先改变属性，再添加节点","slug":"最佳实践-先改变属性-再添加节点","link":"#最佳实践-先改变属性-再添加节点","children":[]},{"level":2,"title":"对场景子节点的操作需要在添加节点到场景后执行","slug":"对场景子节点的操作需要在添加节点到场景后执行","link":"#对场景子节点的操作需要在添加节点到场景后执行","children":[]},{"level":2,"title":"load vs preload","slug":"load-vs-preload","link":"#load-vs-preload","children":[]},{"level":2,"title":"在GDScript中创建资源并保存","slug":"在gdscript中创建资源并保存","link":"#在gdscript中创建资源并保存","children":[]},{"level":2,"title":"shader 代码共享","slug":"shader-代码共享","link":"#shader-代码共享","children":[]},{"level":2,"title":"实现Drag and Drop的简单方法","slug":"实现drag-and-drop的简单方法","link":"#实现drag-and-drop的简单方法","children":[]},{"level":2,"title":"sprite.get_rect() & sprite.global_position","slug":"sprite-get-rect-sprite-global-position","link":"#sprite-get-rect-sprite-global-position","children":[]},{"level":2,"title":"调用父类方法","slug":"调用父类方法","link":"#调用父类方法","children":[]},{"level":2,"title":"autoload类初始化问题","slug":"autoload类初始化问题","link":"#autoload类初始化问题","children":[]},{"level":2,"title":"Control & Node2D","slug":"control-node2d","link":"#control-node2d","children":[]},{"level":2,"title":"Event系统","slug":"event系统","link":"#event系统","children":[]},{"level":2,"title":"获取Label的字体，字体大小","slug":"获取label的字体-字体大小","link":"#获取label的字体-字体大小","children":[]},{"level":2,"title":"多窗口","slug":"多窗口","link":"#多窗口","children":[]},{"level":2,"title":"Sprite2D的PlaceholderTexture的UV不对","slug":"sprite2d的placeholdertexture的uv不对","link":"#sprite2d的placeholdertexture的uv不对","children":[]},{"level":2,"title":"时间","slug":"时间","link":"#时间","children":[]},{"level":2,"title":"忽略警告","slug":"忽略警告","link":"#忽略警告","children":[]},{"level":2,"title":"Resource类与实例","slug":"resource类与实例","link":"#resource类与实例","children":[]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}],"git":{"createdTime":1713017268000,"updatedTime":1713017268000,"contributors":[{"name":"1e0nhardt","email":"huwkigane@gmail.com","commits":1}]},"readingTime":{"minutes":6.03,"words":1809},"filePathRelative":"gamedev/使用Godot中遇到的问题.md","localizedDate":"2023年11月11日","excerpt":""}');export{f as comp,D as data};
